<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EditText使用bug</title>
      <link href="2021/04/30/EditText%E4%BD%BF%E7%94%A8bug/"/>
      <url>2021/04/30/EditText%E4%BD%BF%E7%94%A8bug/</url>
      
        <content type="html"><![CDATA[<h1 id="EditText使用bug"><a href="#EditText使用bug" class="headerlink" title="EditText使用bug"></a>EditText使用bug</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>今天开发完业务流程测试的时候，发现了无语的问题。正常跳转页面出现了如下异常信息。</p><p>异常信息如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.android.internal.util.SyncResultReceiver$TimeoutException: Not called in 5000ms</span><br><span class="line">        at com.android.internal.util.SyncResultReceiver.waitResult(SyncResultReceiver.java:<span class="number">56</span>)</span><br><span class="line">        at com.android.internal.util.SyncResultReceiver.getIntResult(SyncResultReceiver.java:<span class="number">68</span>)</span><br><span class="line">        at android.view.autofill.AutofillManager.ensureServiceClientAddedIfNeededLocked(AutofillManager.java:<span class="number">1841</span>)</span><br><span class="line">        at android.view.autofill.AutofillManager.notifyViewEnteredLocked(AutofillManager.java:<span class="number">958</span>)</span><br><span class="line">        at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class="number">942</span>)</span><br><span class="line">        at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class="number">899</span>)</span><br><span class="line">        at android.view.View.notifyEnterOrExitForAutoFillIfNeeded(View.java:<span class="number">7974</span>)</span><br><span class="line">        at android.view.View.onFocusChanged(View.java:<span class="number">7936</span>)</span><br><span class="line">        at android.widget.TextView.onFocusChanged(TextView.java:<span class="number">10875</span>)</span><br><span class="line">        at android.view.View.handleFocusGainInternal(View.java:<span class="number">7599</span>)</span><br><span class="line">        at android.view.View.requestFocusNoSearch(View.java:<span class="number">12597</span>)</span><br><span class="line">        at android.view.View.requestFocus(View.java:<span class="number">12571</span>)</span><br><span class="line">        at android.view.ViewGroup.onRequestFocusInDescendants(ViewGroup.java:<span class="number">3332</span>)</span><br><span class="line">        at android.view.ViewGroup.requestFocus(ViewGroup.java:<span class="number">3281</span>)</span><br><span class="line">        at android.view.ViewGroup.onRequestFocusInDescendants(ViewGroup.java:<span class="number">3332</span>)</span><br><span class="line">        at android.view.ViewGroup.requestFocus(ViewGroup.java:<span class="number">3281</span>)</span><br><span class="line">        at android.view.ViewGroup.onRequestFocusInDescendants(ViewGroup.java:<span class="number">3332</span>)</span><br><span class="line">        at android.view.ViewGroup.requestFocus(ViewGroup.java:<span class="number">3281</span>)</span><br><span class="line">        at android.view.ViewGroup.onRequestFocusInDescendants(ViewGroup.java:<span class="number">3332</span>)</span><br><span class="line">        at android.view.ViewGroup.requestFocus(ViewGroup.java:<span class="number">3286</span>)</span><br><span class="line">        at android.view.View.requestFocus(View.java:<span class="number">12538</span>)</span><br><span class="line">        at android.view.View.restoreDefaultFocus(View.java:<span class="number">12517</span>)</span><br><span class="line">        at android.view.ViewGroup.restoreDefaultFocus(ViewGroup.java:<span class="number">3348</span>)</span><br><span class="line">        at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:<span class="number">2988</span>)</span><br><span class="line">        at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:<span class="number">2005</span>)</span><br><span class="line">        at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:<span class="number">8202</span>)</span><br><span class="line">        at android.view.Choreographer$CallbackRecord.run(Choreographer.java:<span class="number">1094</span>)</span><br><span class="line">        at android.view.Choreographer.doCallbacks(Choreographer.java:<span class="number">917</span>)</span><br><span class="line">        at android.view.Choreographer.doFrame(Choreographer.java:<span class="number">844</span>)</span><br><span class="line">        at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:<span class="number">1079</span>)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:<span class="number">883</span>)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">100</span>)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:<span class="number">238</span>)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">7798</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:<span class="number">492</span>)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">995</span>)</span><br></pre></td></tr></table></figure><p>此问题出现的莫名其妙，要知道，早上测试还是正常的。吃个饭回来居然直接奔溃了，不能忍啊。</p><p>打眼一看，5秒超时，难道是ANR？</p><p>好吧，分析完代码发现，根本不是。</p><p>接着异常信息向下看，AutofillManager ！！！，自动填充引起的？</p><p>查看了跳转页面，很简单一个获取验证码页面，额。就一个EditText，难道是EditText自动填充导致的？查看源码发现，在Android10上，Edittext默认开启自动填充功能。好吧，果然是这个，解决它。</p><h3 id="解决方式比较简单"><a href="#解决方式比较简单" class="headerlink" title="解决方式比较简单"></a>解决方式比较简单</h3><ol><li><p>积累BaseActivity - onCreate方法直接添加一下代码即可。基本针对全局，方便快捷。别忘记判断版本Android O以上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getWindow().getDecorView().setImportantForAutofill(View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS);</span><br></pre></td></tr></table></figure></li><li><p>也可以直接xml属性 importantForAutofill 设为 no</p></li></ol><p>注：</p><p>此问题只有部分机型出现，本人出现在oppo上。经测试华为，小米上也会偶现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Android </category>
          
          <category> Bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> bug </tag>
            
            <tag> widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hilt依赖注入(1)</title>
      <link href="2021/03/25/Hilt/"/>
      <url>2021/03/25/Hilt/</url>
      
        <content type="html"><![CDATA[<h1 id="Hilt-依赖注入框架"><a href="#Hilt-依赖注入框架" class="headerlink" title="Hilt-依赖注入框架"></a>Hilt-依赖注入框架</h1><p>​    Hilt 是Google 最新的依赖注入框架，其是基于Dagger研发，但它不同于Dagger。对于Android开发者来说，Hilt可以说专门为Android 打造，提供了一种将Dagger依赖项注入到Android应用程序的标准方法，而且创建了一组标准的组件和作用域，这些组件会自动集成到Android应用程序的各个生命周期中，以简化开发者的上手难度。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>@HiltAndroidApp</p><p>触发Hilt的代码生成，包括适用于应用程序的基类，可以使用依赖注入，应用程序容器是应用程序的父容器，这意味着其他容器可以访问其提供的依赖项。</p></li><li><p>@AndroidEntryPoint</p><p>其会创建一个依赖容器，该容器遵循Android类的生命周期</p></li><li><p>@Inject</p><p>用来注入的字段，其类型不能为Private</p><p>如果要告诉 Hilt 如何提供相应类型的实例，需要将 @Inject 添加到要注入的类的构造函数中。</p><p>Hilt有关如何提供不同类型的实例的信息也称为绑定<strong>。</strong></p></li><li><p>@Install(xx)</p><p>Install 用来告诉 Hilt 这个模块会被安装到哪个组件上.</p></li></ul><h2 id="标准组件"><a href="#标准组件" class="headerlink" title="标准组件"></a>标准组件</h2><ol><li><strong><code>ApplicationComponent</code></strong></li><li><strong><code>ActivityRetainedComponent</code></strong></li><li><strong><code>ActivityComponent</code></strong></li><li><strong><code>FragmentComponent</code></strong></li><li><strong><code>ViewComponent</code></strong></li><li><strong><code>ViewWithFragmentComponent</code></strong></li><li><strong><code>ServiceComponent</code></strong></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>它限制了在创建组件和生成组件范围绑定的生命周期</li><li>它指示合适可以使用成员注入的值。(例如：当@Inject 字段不为null时)</li></ul><table><thead><tr><th><strong>Component</strong></th><th><strong>作用范围</strong></th><th><strong>Created at</strong></th><th><strong>Destroyed at</strong></th></tr></thead><tbody><tr><td><strong><code>ApplicationComponent</code></strong></td><td>@Singleton</td><td>Application#onCreate()</td><td>Application#onDestroy()</td></tr><tr><td><strong><code>ActivityRetainedComponent</code></strong></td><td>@ActivityRetainedScope</td><td>Activity#onCreate()</td><td>Activity#onDestroy()</td></tr><tr><td><strong><code>ActivityComponent</code></strong></td><td>@ActivityScoped</td><td>Activity#onCreate()</td><td>Activity#onDestroy()</td></tr><tr><td><strong><code>FragmentComponent</code></strong></td><td>@FragmentScoped</td><td>Fragment#onAttach()</td><td>Fragment#onDestroy()</td></tr><tr><td><strong><code>ViewComponent</code></strong></td><td>@ViewScoped</td><td>View#super()</td><td><code>View</code> destroyed</td></tr><tr><td><strong><code>ViewWithFragmentComponent</code></strong></td><td>@ViewScoped</td><td>View#super()</td><td><code>View</code> destroyed</td></tr><tr><td><strong><code>ServiceComponent</code></strong></td><td>@ServiceScoped</td><td>Service#onCreate()</td><td>Service#onDestroy()</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认情况下，所有的绑定都是无作用域，也就是说，每次绑定时，都会创建一个新的绑定实例；</span><br><span class="line">但是，Dagger 允许绑定作用域到特定组件，如上表所示，在指定组件范围内，实例都只会创建一次，并且对该绑定的所有请求都将共享同一实例。</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>导入依赖</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">api <span class="string">&quot;com.google.dagger:hilt-android:2.28-alpha&quot;</span></span><br><span class="line">annotationProcessor <span class="string">&quot;com.google.dagger:hilt-android-compiler:2.28-alpha&quot;</span></span><br><span class="line">api <span class="string">&#x27;androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;androidx.hilt:hilt-compiler:1.0.0-alpha02&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>导入插件(根目录下build)</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.google.dagger:hilt-android-gradle-plugin:2.28-alpha&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Application 处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HiltAndroidApp</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Activity处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AndroidEntryPoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fragment处理(依赖的activity也需要添加注解@AndroidEntryPoint)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AndroidEntryPoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeFragment</span> <span class="keyword">extends</span> <span class="title">BaseBindFragment</span>&lt;<span class="title">FragmentHomeBinding</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Kind&gt; mKindList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HomeViewModel mHomeViewModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VP2FragmentStateAdapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getLayoutRes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.fragment_home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mHomeViewModel = getViewModel(HomeViewModel.class);</span><br><span class="line">        mKindList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//禁用预加载</span></span><br><span class="line">        dataBind.viewPager.setOffscreenPageLimit(ViewPager2.OFFSCREEN_PAGE_LIMIT_DEFAULT);</span><br><span class="line">        mAdapter = <span class="keyword">new</span> VP2FragmentStateAdapter(getChildFragmentManager(), getLifecycle(), mKindList);</span><br><span class="line">        dataBind.viewPager.setAdapter(mAdapter);</span><br><span class="line">        TabLayoutMediator mediator = <span class="keyword">new</span> TabLayoutMediator(dataBind.topTableLayout, dataBind.viewPager, (tab, position) -&gt; &#123;</span><br><span class="line">            <span class="comment">//这里可以自定义TabView</span></span><br><span class="line">            TextView tabView = <span class="keyword">new</span> TextView(getContext());</span><br><span class="line">            <span class="keyword">int</span>[][] states = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line">            states[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.state_selected&#125;;</span><br><span class="line">            states[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">            <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.color.base_color, R.color.black&#125;;</span><br><span class="line">            ColorStateList colorStateList = <span class="keyword">new</span> ColorStateList(states, colors);</span><br><span class="line">            tabView.setText(mKindList.get(position).getName());</span><br><span class="line">            tabView.setTextColor(colorStateList);</span><br><span class="line">            tabView.setGravity(Gravity.CENTER);</span><br><span class="line">            tab.setCustomView(tabView);</span><br><span class="line">        &#125;);</span><br><span class="line">        mediator.attach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHomeViewModel.getListKind()</span><br><span class="line">                .observe(<span class="keyword">this</span>, list -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mKindList.clear();</span><br><span class="line">                        mKindList.addAll(list);</span><br><span class="line"><span class="comment">//                        mAdapter.setData(mKindList);</span></span><br><span class="line">                        mAdapter.notifyDataSetChanged();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        LogUtils.d(<span class="string">&quot;数据为空&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ViewModel</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HomeRepository mHomeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ApiService mApiService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MediatorLiveData&lt;List&lt;Kind&gt;&gt; mListMediatorLiveData = <span class="keyword">new</span> MediatorLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ViewModelInject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeViewModel</span><span class="params">(<span class="meta">@ActivityContext</span> Context context, HomeRepository homeRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                         ApiService apiService, <span class="meta">@Assisted</span> SavedStateHandle savedStateHandle)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mHomeRepository = homeRepository;</span><br><span class="line">        <span class="keyword">this</span>.mApiService = apiService;</span><br><span class="line">        mListMediatorLiveData.addSource(mHomeRepository.getListKind(), mListMediatorLiveData::postValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;Kind&gt;&gt; getObserverListKind() &#123;</span><br><span class="line">        <span class="keyword">return</span> mListMediatorLiveData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;Kind&gt;&gt; getListKind() &#123;</span><br><span class="line">        loadListKind();</span><br><span class="line">        <span class="keyword">return</span> mListMediatorLiveData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadListKind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mApiService.getListKind()</span><br><span class="line">                .compose(ResponseTransformer.handleResult())</span><br><span class="line">                .compose(ResponseTransformer.applySchedulers())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> ProgressObserver&lt;List&lt;Kind&gt;&gt;(mContext) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;Kind&gt; kinds)</span> </span>&#123;</span><br><span class="line">                        mHomeRepository.insertListKind(kinds);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(ApiException exception)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">super</span>.onException(exception);</span><br><span class="line">                        mHomeRepository.insertListKind(<span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务以及数据仓库的注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    KindDao mKindDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    AppExecutors mAppExecutors;<span class="comment">//线程</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ApiService mApiService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MediatorLiveData&lt;List&lt;Kind&gt;&gt; mListMediatorLiveData = <span class="keyword">new</span> MediatorLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeRepository</span><span class="params">(ApiService apiService, KindDao kindDao, AppExecutors appExecutors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mApiService = apiService;</span><br><span class="line">        <span class="keyword">this</span>.mAppExecutors = appExecutors;</span><br><span class="line">        <span class="keyword">this</span>.mKindDao = kindDao;</span><br><span class="line">        mListMediatorLiveData.addSource(mKindDao.getLiveDataKind(), mListMediatorLiveData::postValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;Kind&gt;&gt; getListKind() &#123;</span><br><span class="line">        <span class="keyword">return</span> mListMediatorLiveData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertListKind</span><span class="params">(List&lt;Kind&gt; kinds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (kinds != <span class="keyword">null</span> &amp;&amp; kinds.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mAppExecutors.getDiskIO()</span><br><span class="line">                    .execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            mKindDao.insertKind(kinds);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mListMediatorLiveData.postValue(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTableData</span><span class="params">(<span class="keyword">int</span> kind, ProgressObserver&lt;TableData&gt; observer)</span> </span>&#123;</span><br><span class="line">        mApiService.getTableData(kind)</span><br><span class="line">                .compose(ResponseTransformer.handleResult())</span><br><span class="line">                .compose(ResponseTransformer.applySchedulers())</span><br><span class="line">                .subscribe(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为整个应用提供依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="meta">@InstallIn(ApplicationComponent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpClient <span class="title">getOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">        SSLSocketFactory ssl = SslContextFactory.getSSLContext().getSocketFactory();</span><br><span class="line">        builder.sslSocketFactory(ssl, Objects.requireNonNull(SslContextFactory.getX509TrustManager()));</span><br><span class="line">        builder.hostnameVerifier((s, sslSession) -&gt; <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Retrofit.<span class="function">Builder <span class="title">getRetrofitBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder();</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .client(getOkHttpClient())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(<span class="keyword">new</span> LiveDataCallAdapterFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title">getRetrofit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder();</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .baseUrl(HttpConst.BASE_URL)</span><br><span class="line">                .client(getOkHttpClient())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(<span class="keyword">new</span> LiveDataCallAdapterFactory())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApiService <span class="title">getApiService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRetrofit().create(ApiService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends HttpService&gt; <span class="function">T <span class="title">getApiService</span><span class="params">(Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRetrofitBuilder().build().create(tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends HttpService&gt; <span class="function">T <span class="title">getApiService</span><span class="params">(String url, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRetrofitBuilder().baseUrl(url).build().create(tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppExecutors <span class="title">getAppExecutors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AppExecutors.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserRepository <span class="title">getUserRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRepository(getApiService(), LocalDatabase.getInstance().userDao(), getAppExecutors());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HomeRepository <span class="title">getHomeRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HomeRepository(getApiService(), LocalDatabase.getInstance().kindDao(), getAppExecutors());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDatabase.getInstance().userDao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KindDao <span class="title">getKindDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDatabase.getInstance().kindDao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li></ul><p>​    以上就是Hilt简单使用方式。</p><h2 id="Hilt-和-Dagger"><a href="#Hilt-和-Dagger" class="headerlink" title="Hilt 和 Dagger"></a>Hilt 和 Dagger</h2><p>Hilt 在依赖项注入库 Dagger 的基础上构建而成，提供了一种将 Dagger 纳入 Android 应用的标准方法。</p><p>关于 Dagger，Hilt 的目标如下：</p><ul><li>简化 Android 应用的 Dagger 相关基础架构。</li><li>创建一组标准的组件和作用域，以简化设置、提高可读性以及在应用之间共享代码。</li><li>提供一种简单的方法来为各种构建类型（如测试、调试或发布）配置不同的绑定。</li></ul><p>由于 Android 操作系统会实例化它自己的许多框架类，因此在 Android 应用中使用 Dagger 要求您编写大量的样板。Hilt 可减少在 Android 应用中使用 Dagger 所涉及的样板代码。Hilt 会自动生成并提供以下各项：</p><ul><li><strong>用于将 Android 框架类与 Dagger 集成的组件</strong> - 您不必手动创建。</li><li><strong>作用域注释</strong> - 与 Hilt 自动生成的组件一起使用。</li><li><strong>预定义的绑定</strong> - 表示 Android 类，如 <code>Application</code> 或 <code>Activity</code>。</li><li><strong>预定义的限定符</strong> - 表示 <code>@ApplicationContext</code> 和 <code>@ActivityContext</code>。</li></ul><p>Dagger 和 Hilt 代码可以共存于同一代码库中。不过，在大多数情况下，最好使用 Hilt 管理您在 Android 上对 Dagger 的所有使用。如需将使用 Dagger 的项目迁移到 Hilt，请参阅迁移指南和“将 Dagger 应用迁移到 Hilt”。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> Hilt </tag>
            
            <tag> Dagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Navigation</title>
      <link href="2021/03/24/Android-Navigation/"/>
      <url>2021/03/24/Android-Navigation/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Navigation-1"><a href="#Android-Navigation-1" class="headerlink" title="Android-Navigation(1)"></a>Android-Navigation(1)</h1><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>导航是指支持用户导航、进入和退出应用中不同内容片段的交互。Android Jetpack 的导航组件可帮助您实现导航，无论是简单的按钮点击，还是应用栏和抽屉式导航栏等更为复杂的模式，该组件均可应对。导航组件还通过遵循一套既定原则来确保一致且可预测的用户体验。</p><p>导航组件由以下三个关键部分组成：</p><ul><li>导航图：在一个集中位置包含所有导航相关信息的 XML 资源。这包括应用内所有单个内容区域（称为<em>目标</em>）以及用户可以通过应用获取的可能路径。</li><li><code>NavHost</code>：显示导航图中目标的空白容器。导航组件包含一个默认 <code>NavHost</code> 实现 <code>NavHostFragment</code>，可显示 Fragment 目标。</li><li><code>NavController</code>：在 <code>NavHost</code> 中管理应用导航的对象。当用户在整个应用中移动时，<code>NavController</code> 会安排 <code>NavHost</code> 中目标内容的交换。</li></ul><p>在应用中导航时，您告诉 <code>NavController</code>，您想沿导航图中的特定路径导航至特定目标，或直接导航至特定目标。<code>NavController</code> 便会在 <code>NavHost</code> 中显示相应目标。</p><p>导航组件提供各种其他优势，包括以下内容：</p><ul><li>处理 Fragment 事务。</li><li>默认情况下，正确处理往返操作。</li><li>为动画和转换提供标准化资源。</li><li>实现和处理深层链接。</li><li>包括导航界面模式（例如抽屉式导航栏和底部导航），用户只需完成极少的额外工作。</li><li><a href="https://developer.android.google.cn/guide/navigation/navigation-pass-data#Safe-args">Safe Args</a> - 可在目标之间导航和传递数据时提供类型安全的 Gradle 插件。</li><li><code>ViewModel</code> 支持 - 您可以将 <code>ViewModel</code> 的范围限定为导航图，以在图表的目标之间共享与界面相关的数据。</li></ul><p>此外，您还可以使用 Android Studio 的 Navigation Editor 来查看和编辑导航图。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>添加支持</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    </span><br><span class="line">  implementation <span class="string">&quot;com.google.android.material:material:1.3.0-alpha04&quot;</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">def</span> nav_version = <span class="string">&quot;2.3.3&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Java language implementation</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-fragment:$nav_version&quot;</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-ui:$nav_version&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Kotlin</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-fragment-ktx:$nav_version&quot;</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-ui-ktx:$nav_version&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Feature module Support</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-dynamic-features-fragment:$nav_version&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Testing Navigation</span></span><br><span class="line">  androidTestImplementation <span class="string">&quot;androidx.navigation:navigation-testing:$nav_version&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Jetpack Compose Integration</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.navigation:navigation-compose:1.0.0-alpha07&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建导航文件（res/navigation/nav_main.xml）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/homeFragment&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">&quot;UnusedNavigation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=&quot;@+id/homeFragment&quot;</span><br><span class="line">        android:name=&quot;com.skwen.shop.ui.fragment.HomeFragment&quot;</span><br><span class="line">        android:label=&quot;HomeFragment&quot;</span><br><span class="line">        tools:layout=&quot;@layout/fragment_home&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=&quot;@+id/categoryFragment&quot;</span><br><span class="line">        android:name=&quot;com.skwen.shop.ui.fragment.CategoryFragment&quot;</span><br><span class="line">        android:label=&quot;CategoryFragment&quot;</span><br><span class="line">        tools:layout=&quot;@layout/fragment_category&quot; /&gt;</span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=&quot;@+id/shopCarFragment&quot;</span><br><span class="line">        android:name=&quot;com.skwen.shop.ui.fragment.ShopCarFragment&quot;</span><br><span class="line">        android:label=&quot;ShopCarFragment&quot;</span><br><span class="line">        tools:layout=&quot;@layout/fragment_shop_car&quot; /&gt;</span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=&quot;@+id/mineFragment&quot;</span><br><span class="line">        android:name=&quot;com.skwen.shop.ui.fragment.MineFragment&quot;</span><br><span class="line">        android:label=&quot;MineFragment&quot;</span><br><span class="line">        tools:layout=&quot;@layout/fragment_mine&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建底部导航menu（res/menu/menu_main_bottom.xml）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/homeFragment&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_home&quot;</span><br><span class="line">        android:title=&quot;@string/main_home&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/categoryFragment&quot;</span><br><span class="line">        android:icon=&quot;@drawable/nav_bottom_category&quot;</span><br><span class="line">        android:title=&quot;@string/main_category&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/shopCarFragment&quot;</span><br><span class="line">        android:icon=&quot;@drawable/nav_bottom_shop_car&quot;</span><br><span class="line">        android:title=&quot;@string/main_shop_car&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/mineFragment&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_mine&quot;</span><br><span class="line">        android:title=&quot;@string/main_mine&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建activity布局（activity_main.xml）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;fragment</span><br><span class="line">            android:id=&quot;@+id/container&quot;</span><br><span class="line">            android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;0dp&quot;</span><br><span class="line">            app:defaultNavHost=&quot;true&quot;</span><br><span class="line">            app:layout_constraintBottom_toTopOf=&quot;@id/bottom_navigation&quot;</span><br><span class="line">            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:navGraph=&quot;@navigation/nav_main&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;com.google.android.material.bottomnavigation.BottomNavigationView</span><br><span class="line">            android:id=&quot;@+id/bottom_navigation&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            app:itemBackground=&quot;@color/white&quot;</span><br><span class="line">            app:itemIconTint=&quot;@drawable/bottom_text_color&quot;</span><br><span class="line">            app:itemTextColor=&quot;@drawable/bottom_text_color&quot;</span><br><span class="line">            app:labelVisibilityMode=&quot;labeled&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toBottomOf=&quot;@id/container&quot;</span><br><span class="line">            app:menu=&quot;@menu/menu_main_bottom&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java (只列出oncreate方法内容)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActivityMainBinding mBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, layoutRes);</span><br><span class="line">NavController navController = Navigation.findNavController(<span class="keyword">this</span>, R.id.container);</span><br><span class="line">NavigationUI.setupWithNavController(mBinding.bottomNavigation, navController);</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Androidx navigation + bottomNavigationView 的基本使用方法。无需其它配置即可实现页面导航。后续会编写一些高级用法，看时间吧…</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>menu_main_bottom.xml 和 nav_main.xml文件中的 item id必须和fragment id一致，否则无法自动实现切换。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Room（1）</title>
      <link href="2021/01/07/Android-Room(1)/"/>
      <url>2021/01/07/Android-Room(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        Room是Jetpack组件库一员，属于ORM库，Room 在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 的强大功能的同时，能够流畅地访问数据库。Room支持编译时的语法检查，并且支持返回LiveData。处理大量结构化数据的应用可极大地受益于在本地保留这些数据。最常见的用例是缓存相关数据。这样，当设备无法访问网络时，用户仍可在离线状态下浏览相应内容。设备重新连接到网络后，用户发起的所有内容更改都会同步到服务器。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>Room 包含 3 个主要组件：</p><ul><li><p>数据库：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</p><p>使用 @Database注释的类应满足以下条件：</p><pre><code>1. 是扩展RoomDatabase类。   2. 在注释中添加与数据库关联的实体列表。      3. 包含具有 0 个参数且返回使用@Dao注解的类的抽象方法</code></pre><p>在运行时，您可以通过调用 [<code>Room.databaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder</a>(android.content.Context, java.lang.Class, java.lang.String)) 或 [<code>Room.inMemoryDatabaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder</a>(android.content.Context, java.lang.Class)) 获取 <a href="https://developer.android.google.cn/reference/androidx/room/Database"><code>Database</code></a> 的实例。</p></li><li><p>Entity：表示数据库中的表</p></li><li><p>Dao：包含用于访问数据库的方法</p></li></ul><p>应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。</p><p>Room 不同组件之间的关系如图 1 所示：</p><p><a href="https://imgchr.com/i/sVpDVf"><img src="https://s3.ax1x.com/2021/01/06/sVpDVf.png" alt="sVpDVf.png"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>定义实体类Entity，也就是我们常用bean，需要使用@Entity注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键必须添加 默认不自增,这里我们直接使用自增</span></span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此注解可不添加，默认使用实体名称</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = &quot;book_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">// get和set自行添加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义实体类对应的Dao类，用于操作数据库</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books where id is :id&quot;)</span></span><br><span class="line">    <span class="function">Books <span class="title">findOneById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books where id in (:ids)&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">findAllById</span><span class="params">(<span class="keyword">long</span>[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBooks</span><span class="params">(Books... books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Dao中，我们定义了增、删、改、查、等操作。其中insertBooks方法可用于插入数据或更新数据。@Insert的参数 onConflict 说明一下：</p><ul><li>OnConflictStrategy.ABORT (默认)回滚冲突事务。</li><li>OnConflictStrategy.REPLACE 将现有的行替换为新的行。</li><li>OnConflictStrategy.IGNORE} 来保留现有的行。</li></ul><p>我们这里使用 OnConflictStrategy.REPLACE ，就为了懒，省事。</p></li><li><p>我们开始定义AppDatabase</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database(entities = Books.class, version = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppDatabase sAppDatabase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DB_NAME = <span class="string">&quot;app.db&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> BooksDao <span class="title">booksDao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为方便使用，写个单例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppDatabase <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sAppDatabase == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (AppDatabase.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sAppDatabase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sAppDatabase = buildAppDatabase(context);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sAppDatabase;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取 AppDatabase</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AppDatabase <span class="title">buildAppDatabase</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Room</span><br><span class="line">                .databaseBuilder(context.getApplicationContext(), AppDatabase.class, DB_NAME)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>必须继承 RoomDatabase</li><li>使用@Database注解，最少添加一个entities 以及设置version </li><li>其它属性后续的教程会说明</li></ol></li><li><p>页面中的使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AppDatabase.getInstance(context)</span><br><span class="line">                .booksDao()</span><br><span class="line">                .getAll()</span><br></pre></td></tr></table></figure><p>注意：数据库操作，请在子线程操作</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>组成：Database Entity Dao</li><li>使用简单，获取实例方便</li><li>熟悉原生SQL效率更好，门槛低</li><li>面向对象</li><li>支持Livedata Rxjava 后续会更新使用方法</li><li>表之间关系处理 （embedded等使用，后续会详细说明）</li></ol><p>源码:<a href="https://gitee.com/skwen/android-room.git">https://gitee.com/skwen/android-room.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Android </category>
          
          <category> JetPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
            <tag> Room </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Sqlite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
