<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android-Room（1）</title>
      <link href="2021/01/07/Android-Room(1)/"/>
      <url>2021/01/07/Android-Room(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        Room是Jetpack组件库一员，属于ORM库，Room 在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 的强大功能的同时，能够流畅地访问数据库。Room支持编译时的语法检查，并且支持返回LiveData。处理大量结构化数据的应用可极大地受益于在本地保留这些数据。最常见的用例是缓存相关数据。这样，当设备无法访问网络时，用户仍可在离线状态下浏览相应内容。设备重新连接到网络后，用户发起的所有内容更改都会同步到服务器。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>Room 包含 3 个主要组件：</p><ul><li><p>数据库：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</p><p>使用 @Database注释的类应满足以下条件：</p><pre><code>1. 是扩展RoomDatabase类。   2. 在注释中添加与数据库关联的实体列表。      3. 包含具有 0 个参数且返回使用@Dao注解的类的抽象方法</code></pre><p>在运行时，您可以通过调用 [<code>Room.databaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder</a>(android.content.Context, java.lang.Class, java.lang.String)) 或 [<code>Room.inMemoryDatabaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder</a>(android.content.Context, java.lang.Class)) 获取 <a href="https://developer.android.google.cn/reference/androidx/room/Database"><code>Database</code></a> 的实例。</p></li><li><p>Entity：表示数据库中的表</p></li><li><p>Dao：包含用于访问数据库的方法</p></li></ul><p>应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。</p><p>Room 不同组件之间的关系如图 1 所示：</p><p><a href="https://imgchr.com/i/sVpDVf"><img src="https://s3.ax1x.com/2021/01/06/sVpDVf.png" alt="sVpDVf.png"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>定义实体类Entity，也就是我们常用bean，需要使用@Entity注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键必须添加 默认不自增,这里我们直接使用自增</span></span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此注解可不添加，默认使用实体名称</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = &quot;book_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">// get和set自行添加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义实体类对应的Dao类，用于操作数据库</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books where id is :id&quot;)</span></span><br><span class="line">    <span class="function">Books <span class="title">findOneById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from books where id in (:ids)&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">findAllById</span><span class="params">(<span class="keyword">long</span>[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBooks</span><span class="params">(Books... books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Dao中，我们定义了增、删、改、查、等操作。其中insertBooks方法可用于插入数据或更新数据。@Insert的参数 onConflict 说明一下：</p><ul><li>OnConflictStrategy.ABORT (默认)回滚冲突事务。</li><li>OnConflictStrategy.REPLACE 将现有的行替换为新的行。</li><li>OnConflictStrategy.IGNORE} 来保留现有的行。</li></ul><p>我们这里使用 OnConflictStrategy.REPLACE ，就为了懒，省事。</p></li><li><p>我们开始定义AppDatabase</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database(entities = Books.class, version = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppDatabase sAppDatabase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DB_NAME = <span class="string">&quot;app.db&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> BooksDao <span class="title">booksDao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为方便使用，写个单例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppDatabase <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sAppDatabase == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (AppDatabase.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sAppDatabase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sAppDatabase = buildAppDatabase(context);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sAppDatabase;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取 AppDatabase</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AppDatabase <span class="title">buildAppDatabase</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Room</span><br><span class="line">                .databaseBuilder(context.getApplicationContext(), AppDatabase.class, DB_NAME)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>必须继承 RoomDatabase</li><li>使用@Database注解，最少添加一个entities 以及设置version </li><li>其它属性后续的教程会说明</li></ol></li><li><p>页面中的使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AppDatabase.getInstance(context)</span><br><span class="line">                .booksDao()</span><br><span class="line">                .getAll()</span><br></pre></td></tr></table></figure><p>注意：数据库操作，请在子线程操作</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>组成：Database Entity Dao</li><li>使用简单，获取实例方便</li><li>熟悉原生SQL效率更好，门槛低</li><li>面向对象</li><li>支持Livedata Rxjava 后续会更新使用方法</li><li>表之间关系处理 （embedded等使用，后续会详细说明）</li></ol><p>源码:<a href="https://gitee.com/skwen/android-room.git">https://gitee.com/skwen/android-room.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Android </category>
          
          <category> JetPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
            <tag> Room </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Sqlite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
